"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setupBoardStage = exports.defaultEnvironmentProperties = exports.defaultWindowStyles = void 0;
const hooks_1 = require("./hooks");
exports.defaultWindowStyles = {
    width: 1024,
    height: 640,
};
exports.defaultEnvironmentProperties = {
    windowWidth: exports.defaultWindowStyles.width,
    windowHeight: exports.defaultWindowStyles.height,
};
const applyStylesToWindow = (windowStyles = {}, previousProps) => {
    // we revert the changes to previous values when running cleanup
    previousProps.windowHeight = previousProps.windowHeight ? window.outerHeight : exports.defaultWindowStyles.height;
    previousProps.windowWidth = previousProps.windowWidth ? window.outerWidth : exports.defaultWindowStyles.width;
    window.resizeTo(windowStyles.windowWidth || previousProps.windowWidth, windowStyles.windowHeight || previousProps.windowHeight);
    document.body.style.backgroundColor = windowStyles.windowBackgroundColor || '';
};
const setupBoardStage = (board, parentElement) => {
    const previousWindowEnvironmentProps = {};
    const canvas = document.createElement('div');
    (0, hooks_1.callHooks)(board, 'beforeAppendCanvas', canvas);
    parentElement.appendChild(canvas);
    canvas.setAttribute('id', 'board-canvas');
    const { environmentProps } = board;
    const updateWindow = (windowEnvironmentProps) => {
        applyStylesToWindow(windowEnvironmentProps, previousWindowEnvironmentProps);
    };
    applyStylesToWindow(environmentProps, previousWindowEnvironmentProps);
    const cleanup = () => {
        (0, hooks_1.callHooks)(board, 'beforeStageCleanUp', canvas);
        canvas.remove();
        if (previousWindowEnvironmentProps.windowWidth && previousWindowEnvironmentProps.windowHeight) {
            window.resizeTo(previousWindowEnvironmentProps.windowWidth, previousWindowEnvironmentProps.windowHeight);
        }
    };
    // backward compatibility with older versions
    //  of Codux that still use updateCanvas
    function updateCanvas() {
        return;
    }
    return { canvas, updateWindow, updateCanvas, cleanup };
};
exports.setupBoardStage = setupBoardStage;
//# sourceMappingURL=setup-stage.js.map